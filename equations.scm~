(define (next-string string)
  (substring string 1))

(define (get-current-char string index)
  (string-ref string 0))

(define-syntax add-token
  (rsc-macro-transformer
   (lambda (form environment)
     (let ((cons (close-syntax cons environment))
	   (cadr (close-syntax cadr environment))
	   (cddr (close-syntax cddr environment))
	   (caddr (close-syntax caddr environment)))
       (if (eqv? (cddr form) ())
	   `(,cons (cadr form) (lex equation-string (+ index 1)))
	   `(,cons (,cons (cadr form) (caddr form))
		   (lex equation-string (+ index 1))))))))

(define-syntax add-number-and-continue
  (rsc-macro-tranformer
   (lambda (form environment)
     ())))

(define (lex equation-string index)
  (let ((char (get-current-char equation-string)))
    (if (char->digit char)
	(let ((num (get-num equation-string index)))
	  (add-number-and-continue num)
	(case char
	  ((#\=) (add-token-and-continue 'EQ))
	  ((#\x) (add-token-and-continue 'IND))
	  ((#\y) (add-token-and-continue 'DEP))
	  ((#\() (add-token-and-continue 'OPEN))
	  ((#\)) (add-token-and-continue 'CLOSE))
	  ((#\+) (add-token-and-continue 'OP1 +))
	  ((#\-) (add-token-and-continue 'OP1 -))
	  ((#\*) (add-token-and-continue 'OP2 *))
	  ((#\/) (add-token-and-continue 'OP2 /))
	  ((#\^) (add-token-and-continue 'EXPT))
	  ((#\v) (add-token-and-continue 'ROOT))
	  ((#\l) (add-token-and-continue 'LOG))
	  ((#\n) (add-token-and-continue 'LN))
	  (else (format t "Invalid character ~a in equation" char)))))
